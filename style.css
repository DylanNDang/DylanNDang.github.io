@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');
@import url('https://fonts.googleapis.com/css?family=Montserrat:100');
/* Home Page*/
body {
    background-color: #DDCEE0;
}
/* Nav bar (don't touch)*/
body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
  }
  
  .topnav {
    overflow: hidden;
    background-color: #333;
  }
  
  .topnav a {
    float: left;
    color: #f2f2f2;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
  }
  
  .topnav a:hover {
    background-color: #ddd;
    color: black;
  }
  
  /* .topnav a.active { (don't touch)
    background-color: #4c77af;
    color: white;
  } */

/* Joe's page, this section is all done by Joe */
#bgcolorjoe {
    background-color: #C90016;
}
/* text for page */
#textjoe{ 
    font-family: "Comic Sans MS", sans-serif;
    color: #FFFFFF;
    margin-top: 10px;
    margin-left: 20px;
    margin-right: 150px;
    margin-bottom: 10px;
}
/* These next two things I added for everyone to show how external CSS can be used. */
table {
    	border: solid purple;
}

ul {
	list-style-type: square;
	padding: 1;
}

/* End of what Joe did */

/* Dylan's page */
#bgdylan {
    background-color: rgb(4, 191, 253);
}
/* text for page */
#textdylan{
        font-family: verdana;
        font-size: 20px;
        color: rgb(255, 255, 255);
        /* text-align: center; */
    }

    body {
        background-color: #232323;
    }
    /* gltch effects 1 */
    .glitch {
        font: {
            size: 8.125em;
            family: 'Raleway', sans-serif;
            weight: 700;
        }
        text-decoration: none;
        text-transform: uppercase;
        /* position: absolute;
        top: 50%;
        left: 50%; */
        transform: translate(-50%, -50%);
        margin: 0;
        color: #fff;
        letter-spacing: 5px;
        
        &:before, &:after {
            display: block;
            content: attr(data-glitch);
            text-transform: uppercase;
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            opacity: .8;
        } &:after {
            color: #f0f;
            z-index: -2;
        } &:before {
            color: #0ff;
            z-index: -1;
        }
        &:hover {
            &:before {
                animation: glitch .3s cubic-bezier(.25, .46, .45, .94) both 5
            }
            &:after {
                animation: glitch .3s cubic-bezier(.25, .46, .45, .94) reverse both 5
            }
        }
    }
    /* gltch effects 2 */
    @media only screen and (max-width: 400px) {
        .glitch {
            font-size: 3em;
        }
    }
    
    
    @keyframes glitch {
        0% {
            transform: translate(0)
        }
        20% {
            transform: translate(-5px, 5px)
        }
        40% {
            transform: translate(-5px, -5px)
        }
        60% {
            transform: translate(5px, 5px)
        }
        80% {
            transform: translate(5px, -5px)
        }
        to {
            transform: translate(0)
        }
    }

    html, body, h1 {
        padding: 0;
        margin: 0;
        font-family: 'Montserrat', sans-serif;
    }
    
    #app {
        background: rgb(10,10,10);
        /* height: 100vh;
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center; */
        
        background-size: cover;
        background-position: center;
        z-index: 1;
    }
    
    #wrapper {
         text-align: center;
    }
    
    .sub {
        color: rgb(100,220,220);
        letter-spacing: 1em;
    }
    
    /*Here's the meat and potatoes. */
    
    /* Our mixin positions a copy of our text
    directly on our existing text, while
    also setting content to the appropriate
    text set in the data-text attribute. */
    @mixin glitchCopy { 
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
    }
    
    .glitch {
        position: relative;
        color: white;
        font-size: 4em;
        letter-spacing: .5em;
        /* Animation provies a slight random skew. Check bottom of doc
        for more information on how to random skew. */
        animation: glitch-skew 1s infinite linear alternate-reverse;
        
        /* Creates a copy before our text.  */
        &::before{
            /* Duplicates our text with the mixin. */
            @include glitchCopy;
            /* Scoots text slightly to the left for the color offset. */
            left: 2px;
            /* Creates the color 'shadow' that happens on the glitch. */
            text-shadow: -2px 0 #ff00c1;
            /* Creates an initial clip for our glitch. This works in
            a typical top,right,bottom,left fashion and creates a mask
            to only show a certain part of the glitch at a time. */
            clip: rect(44px, 450px, 56px, 0);
            /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
            with an alternating animation to keep things fresh. */
            animation: glitch-anim 5s infinite linear alternate-reverse;
        }
        
        /* Creates a copy after our text. Note comments from ::before. */
        &::after {
            @include glitchCopy;
            left: -2px;
            text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
            animation: glitch-anim2 1s infinite linear alternate-reverse;
        }
    }
    
    /* Creates an animation with 20 steaps. For each step, it calculates 
    a percentage for the specific step. It then generates a random clip
    box to be used for the random glitch effect. Also adds a very subtle
    skew to change the 'thickness' of the glitch.*/
    @keyframes glitch-anim {
      $steps: 20;
      @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
          clip: rect(random(100)+px, 9999px, random(100)+px, 0);
                transform: skew((random(100) / 100) + deg);
        }
      }
    }
    
    /*Same deal, just duplicated for ultra randomness. */
    @keyframes glitch-anim2 {
      $steps: 20;
      @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
          clip: rect(random(100)+px, 9999px, random(100)+px, 0);
                transform: skew((random(100) / 100) + deg);
        }
      }
    }
    
    /* Does the same deal as before, but now only skews. Used for main text. */
    @keyframes glitch-skew {
      $steps: 10;
      @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
          transform: skew((random(10) - 5) + deg);
        }
      }
    }

    /* p.dylan {
        font-family: verdana;
        font-size: 25px;
    } */

/* End of Dylan's page */

/* Ethan's page */
#bgethan {
    background-color: rgb(136, 125, 66);
}
/* text for page */
#textethan{
    font-family: verdana;
    font-size: 20px;
    /* text-align: center; */
}

/* Noah's page */
#bgnoah {
    background-color: #d2b48c;
    
}
table{
    display: block;
    margin:auto;
    box-shadow: 10px 10px 15px #4b2e83;
}
/* text for page */
#textethan{
    font-family: verdana;
    font-size: 20px;
    /* text-align: center; */
}
